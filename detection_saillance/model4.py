import torch
import torch.nn as nn
import torch.optim as optim

class Net(nn.Module):
    def __init__(self):
        super(Net, self).__init__()
        self.conv1 = nn.Conv2d(3, 64, kernel_size=3)
        self.conv2 = nn.Conv2d(64, 64, kernel_size=3)
        self.conv2_maxpool = nn.MaxPool2d(2)
        self.conv3 = nn.Conv2d(64, 128, kernel_size=3)
        self.conv4 = nn.Conv2d(128, 128, kernel_size=3)
        self.conv4_maxpool = nn.MaxPool2d(2)
        self.conv5 = nn.Conv2d(128, 256, kernel_size=3)
        self.conv6 = nn.Conv2d(256, 256, kernel_size=3)
        self.conv6_maxpool = nn.MaxPool2d(2)
        self.conv7 = nn.Conv2d(256, 512, kernel_size=3)
        self.conv8 = nn.Conv2d(512, 512, kernel_size=3)
        self.conv8_maxpool = nn.MaxPool2d(2)

        self.conv21 = nn.Conv2d(3, 64, kernel_size=3)
        self.conv22 = nn.Conv2d(64, 64, kernel_size=3)
        self.conv22_maxpool = nn.MaxPool2d(2)
        self.conv23 = nn.Conv2d(64, 128, kernel_size=3)
        self.conv24 = nn.Conv2d(128, 128, kernel_size=3)
        self.conv24_maxpool = nn.MaxPool2d(2)
        self.conv25 = nn.Conv2d(128, 256, kernel_size=3)
        self.conv26 = nn.Conv2d(256, 256, kernel_size=3)
        self.conv26_maxpool = nn.MaxPool2d(2)
        self.conv27 = nn.Conv2d(256, 512, kernel_size=3)
        self.conv28 = nn.Conv2d(512, 512, kernel_size=3)
        self.conv28_maxpool = nn.MaxPool2d(2)

        self.upsample = nn.Upsample(size=(26,36), mode='bilinear')
        
        self.relu1 = nn.ReLU()
        self.relu2 = nn.ReLU()
        self.relu3 = nn.ReLU()
        self.relu4 = nn.ReLU()
        self.relu5 = nn.ReLU()
        self.relu6 = nn.ReLU()
        self.relu7 = nn.ReLU()
        self.relu8 = nn.ReLU()

        self.relu21 = nn.ReLU()
        self.relu22 = nn.ReLU()
        self.relu23 = nn.ReLU()
        self.relu24 = nn.ReLU()
        self.relu25 = nn.ReLU()
        self.relu26 = nn.ReLU()
        self.relu27 = nn.ReLU()
        self.relu28 = nn.ReLU()

    def forward(self, x):
        x2 = nn.functional.interpolate(x, (240,320))
        x = self.conv1(x)
        x = self.relu1(x)
        x = self.conv2(x)
        x = self.relu2(x)
        x = self.conv2_maxpool(x)
        x = self.conv3(x)
        x = self.relu3(x)
        x = self.conv4(x)
        x = self.relu4(x)
        x = self.conv4_maxpool(x)
        x = self.conv5(x)
        x = self.relu5(x)
        x = self.conv6(x)
        x = self.relu6(x)
        x = self.conv6_maxpool(x)
        x = self.conv7(x)
        x = self.relu7(x)
        x = self.conv8(x)
        x = self.relu8(x)
        x = self.conv8_maxpool(x)

        x2 = self.conv21(x2)
        x2 = self.relu21(x2)
        x2 = self.conv22(x2)
        x2 = self.relu22(x2)
        x2 = self.conv22_maxpool(x2)
        x2 = self.conv23(x2)
        x2 = self.relu23(x2)
        x2 = self.conv24(x2)
        x2 = self.relu24(x2)
        x2 = self.conv24_maxpool(x2)
        x2 = self.conv25(x2)
        x2 = self.relu25(x2)
        x2 = self.conv26(x2)
        x2 = self.relu26(x2)
        x2 = self.conv26_maxpool(x2)
        x2 = self.conv27(x2)
        x2 = self.relu27(x2)
        x2 = self.conv28(x2)
        x2 = self.relu28(x2)
        x2 = self.conv28_maxpool(x2)
        x2 = self.upsample(x2)

        x = torch.cat((x, x2), 1)

        return torch.sum(x, 1)